sudo: false

matrix:
  fast_finish: true
  include:
    - language: cpp
      os: osx
      osx_image: xcode8

before_cache:
  - rm -f $HOME/downloads/travis_wait*.log

cache:
  timeout: 1000
  directories:
  - downloads

# Only build the master branch, otherwise once the release is added, Github
# creates a tag which triggers another identical build.
branches:
  only:
    - master

before_install:
  - brew update

install:
  - LLVMVER=3.9.0
  - if [ ! -d downloads ] ; then
      mkdir downloads ;
    fi;
  - pushd downloads
  - ls -l
  - if [ -d temp ]; then
      ls -l temp;
    fi;
  - if [ ! -f clang+llvm-$LLVMVER-x86_64-apple-darwin.tar.xz ] ; then
      curl -L -O http://llvm.org/releases/$LLVMVER/clang+llvm-$LLVMVER-x86_64-apple-darwin.tar.xz;
    fi;
  - if [ -d /usr/local/llvm ] ; then
      rm -r /usr/local/llvm;
    fi
  - if [ -d clang+llvm-$LLVMVER-x86_64-apple-darwin ] ; then
      rm -r clang+llvm-$LLVMVER-x86_64-apple-darwin;
    fi
  - tar -xf clang+llvm-$LLVMVER-x86_64-apple-darwin.tar.xz;
  - mv clang+llvm-$LLVMVER-x86_64-apple-darwin /usr/local/llvm;
  - chmod 744 /usr/local/llvm;
  - export CC=/usr/local/llvm/bin/clang
  - export CXX=/usr/local/llvm/bin/clang++
  - brew install openssl || brew upgrade openssl
  - brew install cmake || brew upgrade cmake
  - brew install sqlite || brew upgrade sqlite
  - brew install xz || brew upgrade xz
  - popd;

script:
  - BOOSTVER=1.62.0
  - PYTHONVER=3.5.2
  - OSXVER=$(sw_vers -productVersion | awk -F '.' '{print $1 "." $2}')
  - VALGRIND=3.12.0
  - HDF5=1.8.17
  - MACOS_SDK="-mmacosx-version-min=$OSXVER";
  - BUILD_VALGRIND=true
  - BUILD_PYTHON=true
  - BUILD_HDF5=true
  - BUILD_BOOST=false
  - BUILD_BOOST_PYTHON=false
  - if [ $OSXVER = 10.10 ] ; then
      OSX_NAME=yosemite ;
    elif [ $OSXVER = 10.11 ] ; then
      OSX_NAME=el_capitan ;
    elif [ $OSXVER = 10.12 ] ; then
       OSX_NAME=sierra ;
    fi
  - pushd downloads
  - brew tap homebrew/science;
# Build/Install hdf5
  - if [ -f hdf5-$HDF5.$OSX_NAME.bottle.tar.gz ] ; then
      echo 'Installing hdf5 from cache...';
      BUILD_HDF5=false;
      brew install hdf5-$HDF5.$OSX_NAME.bottle.tar.gz;
    else
      BUILD_HDF5=true;
    fi
  - if [ "$BUILD_HDF5" = true ] ; then
      echo 'Installing hdf5 from homebrew...';
      brew install hdf5;
      brew unlink hdf5;
      if [ ! -d hdf5-$HDF5 ] ; then
        brew unpack --patch --destdir=. hdf5;
      fi;
      pushd hdf5-$HDF5;
      ./configure --prefix=/usr/local/Cellar/hdf5/$HDF5 --enable-production --enable-debug=no --disable-dependency-tracking --with-zlib=/usr --with-szlib=/usr/local/opt/szip --enable-static=yes --enable-shared=yes --enable-cxx --disable-fortran CC=/usr/local/llvm/bin/clang CXX=/usr/local/llvm/bin/clang++ CFLAGS="$MACOS_SDK" CPPFLAGS="$MACOS_SDK" LDFLAGS="$MACOS_SDK";
      make >/dev/null || make;
      make install >hdf5.log;
      popd;
      brew bottle hdf5;
      rm -r hdf5-$HDF5;
    fi
# Build/Install valgrind
  - if ls valgrind-$VALGRIND.$OSX_NAME.bottle*tar.gz 1>/dev/null 2>&1; then
      echo 'Installing valgrind from cache...';
      BUILD_VALGRIND=false;
      brew install valgrind-$VALGRIND.$OSX_NAME.bottle*tar.gz;
    else
      BUILD_VALGRIND=true;
    fi
  - if [ "$BUILD_VALGRIND" = true ] ; then
      echo 'Installing valgrind from homebrew...';
      brew install --build-bottle valgrind;
      brew unlink valgrind;
      if [ ! -d valgrind-$VALGRIND ] ; then
        brew unpack --patch --destdir=. valgrind ;
      fi;
      pushd valgrind-$VALGRIND;
      ./autogen.sh;
      ./configure --disable-dependency-tracking --prefix=/usr/local/Cellar/valgrind/$VALGRIND --enable-only64bit --build=amd64-darwin CC=/usr/local/llvm/bin/clang CXX=/usr/local/llvm/bin/clang++;
      make >/dev/null || make;
      make install > valgrind.log;
      brew link --overwrite valgrind;
      popd;
      brew bottle valgrind;
      rm -rf valgrind-$VALGRIND;
    fi;
# Build/Install python3
  - if ls python3-$PYTHONVER*$OSX_NAME.bottle*tar.gz 1>/dev/null 2>&1; then
      echo 'Installing python3 from cache...';
      BUILD_PYTHON=false;
      brew install python3-$PYTHONVER*$OSX_NAME.bottle*tar.gz;
      BUILD_BOOST=true;
      BUILD_BOOST_PYTHON=true;
    else
      BUILD_PYTHON=true;
    fi;
  - if [ "$BUILD_PYTHON" = true ] ; then
      echo 'Installing python3 from homebrew...';
      brew install --build-bottle python3;
      brew unlink python3;
      if [ ! -d python3-$PYTHONVER ] ; then
        brew unpack --patch --destdir=. python3;
      fi;
      pushd python3-$PYTHONVER;
      ./configure --prefix=/usr/local/Cellar/python3/$PYTHONVER --enable-ipv6 --datarootdir=/usr/local/Cellar/python3/$PYTHONVER/share --datadir=/usr/local/Cellar/python3/$PYTHONVER/share --enable-shared --with-ensurepip --without-gcc --with-valgrind CC=/usr/local/llvm/bin/clang CXX=/usr/local/llvm/bin/clang++ LDFLAGS="$MACOS_SDK -L/usr/local/opt/openssl/lib" CPPFLAGS="-pipe -w -Os -march=native -isystem/usr/local/include -isystem/usr/include/libxml2 -isystem/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers -I/usr/local/opt/readline/include -I/usr/local/opt/sqlite/include -I/usr/local/opt/openssl/include $MACOS_SDK" CFLAGS="-pipe -w -Os -march=native -isystem/usr/local/include -isystem/usr/include/libxml2 -isystem/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers -I/usr/local/opt/readline/include -I/usr/local/opt/sqlite/include -I/usr/local/opt/openssl/include $MACOS_SDK";
      CC=/usr/local/llvm/bin/clang;
      CXX=/usr/local/llvm/bin/clang++;
      LDFLAGS="$MACOS_SDK -L/usr/local/opt/openssl/lib";
      CPPFLAGS="-pipe -w -Os -march=native -isystem/usr/local/include -isystem/usr/include/libxml2 -isystem/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers -I/usr/local/opt/readline/include -I/usr/local/opt/sqlite/include -I/usr/local/opt/openssl/include $MACOS_SDK" ;
      CFLAGS="-pipe -w -Os -march=native -isystem/usr/local/include -isystem/usr/include/libxml2 -isystem/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers -I/usr/local/opt/readline/include -I/usr/local/opt/sqlite/include -I/usr/local/opt/openssl/include $MACOS_SDK";
      MACOSX_DEPLOYMENT_TARGET=$OSXVER;
      make >/dev/null || make;
      make install PYTHONAPPSDIR=/usr/local/Cellar/python3/$PYTHONVER > python3.log;
      popd;
      brew link --overwrite python3;
      brew bottle python3;
      rm -rf python3-$PYTHONVER;
    fi;
# Build/Install boost
  - chmod 744 ../build-boost.sh
  - if [ -f boost-$BOOSTVER.tar.bz2 ]; then
      cp boost-$BOOSTVER.tar.bz2 /Users/travis/Library/Caches/Homebrew;
    fi;
  - travis_wait 30 ./../build-boost.sh $OSXVER $PYTHONVER $BOOSTVER $BUILD_BOOST;
  - cp /Users/travis/Library/Caches/Homebrew/boost-$BOOSTVER.tar.bz2 .
# Build/Install boost-python
  - if ! ls boost-$BOOSTVER.$OSX_NAME.bottle*tar.gz 1>/dev/null 2>&1; then
      echo 'Not ready to build boost-python';
      BUILD_BOOST_PYTHON=false;
    elif ls boost-python-$BOOSTVER.$OSX_NAME.bottle*tar.gz 1> /dev/null 2>&1; then
      echo 'Installing boost-python from cache...';
      BUILD_BOOST_PYTHON=false;
      brew install boost-python-$BOOSTVER.$OSX_NAME.bottle*tar.gz;
    elif ls temp/boost-python-$BOOSTVER.$OSX_NAME.bottle*tar.gz 1>/dev/null 2>&1; then
      echo 'Installing boost-python from cached homebrew version...';
      brew install temp/boost-python-$BOOSTVER.$OSX_NAME.bottle*tar.gz;
      BUILD_BOOST_PYTHON=true;
    else
      echo 'Building homebrew boost-python bottle...';
      BUILD_BOOST_PYTHON=true;
      brew install --build-bottle boost-python --c++11 --with-python3;
      if [ ! -d temp ]; then
        mkdir temp;
      fi;
      pushd temp;
      brew bottle boost-python;
      popd;
    fi;
  - if [ "$BUILD_BOOST_PYTHON" = true ]; then
      echo 'Building boost-python...';
      chmod 744 ../build-boost-python.sh
      ./../build-boost-python.sh $OSXVER $PYTHONVER $BOOSTVER;
      brew bottle boost-python;
    fi;
# Make bottles
  - popd
  - mkdir bottles-osx$OSXVER
  - cp downloads/*.$OSX_NAME.bottle*tar.gz bottles-osx$OSXVER

before_deploy:
  - export RELEASE_FILES=$(ls bottles-osx$OSXVER)
  - "echo 'Deploying files to Github: '$RELEASE_FILES"

deploy:
  provider: releases
  api_key:
    secure: "TqfrKR8qj8WNPcHvo6b9BhJmAYO0LEh8CI95UJ8W9RizWmiQPeq05nDyIoKW2gHvtgHmDnAWXr5je40yrQWq64EyogfaG+0gfJfdVV2cZcuJ4MSLW7sgEWwRaybHeKJjZTKVjrTA2EZDba3czYNclILbP+m1aq0nCzl37/+DdTkbGfkhxUcD7sBoPEYvAJWnOptKfsmOTwNE8bymnf4MutiI8H/8PQoj+SFJfLmGgfKU4PAVtE4CuY6Y9wZXsDv6jxSbIJxRhyY3Jki0npQ8tgv1iUQhc0W9OmFTEQ8AvdqHTaCF10F6CKwfGQWsEZyEbcqSy7ZzoFCuCTBM62u7z4EyXHSoeaK70Z2DWLfbiByOVB/Fg4t41y3JSgP/JUJY919gHi7FO/PBVuM8JwTxqkMqDvFiMhDi0hGwxZuJPb/NUJBBBK6jBfPpkWTlOIkVFET23WtE0+0TKoeeFZVFdJtPI0JlOCnmgjfvMgiUYt/JqKJvhBPa1iTu7iZKQp58NuuzLXn27yZrw2TaIOeH4Vnqz1Sf7JUL+IL8AHYeH/AtYNRCaKvvmDiVzSLL4zKzSQTde4ovWEPrExUUkRRCe26V0uJBosptEq7YftCoiLFDe1yEGRP1oK9K8h6hDHPxfaKTObGgA4tvzXgmSDm/Itanqpn62ChFHYPmowKpLWA="
  file: bottles-osx$OSXVER/*.gz
  file_glob: true
  skip_cleanup: true
  on:
    tag: true
  overwrite: true
